import type { Meta, StoryObj } from '@storybook/vue3';
import readme from './README.md?raw';

import AutocompleteField from './AutocompleteField.vue';
import type { Option } from '@/type/form/Option';

// More on how to set up stories at: https://storybook.js.org/docs/vue/writing-stories/introduction
const meta = {
  title: 'View/AutocompleteField',
  component: AutocompleteField,
  // This component will have an automatically generated docsPage entry: https://storybook.js.org/docs/vue/writing-docs/autodocs
  tags: ['autodocs'],
  parameters: {
    docs: {
      description: { component: readme },
    },
  },
  argTypes: {},
  args: {
    label: 'Autocomplete',
  }, // default value
} satisfies Meta<typeof AutocompleteField>;

export default meta;
type Story = StoryObj<typeof meta>;
/*
 *ðŸ‘‡ Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/vue/api/csf
 * to learn how to use render functions.
 */
export const Default: Story = {
  args: {
    options: [],
    name: '',
  },
  render: (args) => ({
    components: { AutocompleteField },
    setup() {
      return { args };
    },
    data() {
      return {
        defaultOpts: [
          { code: '1', label: 'First' },
          { code: '2', label: 'Second' },
          { code: '3', label: 'Third' },
          { code: '4', label: 'Fourth' },
        ],
        opts: [],
      };
    },
    methods: {
      onQueryHandler(query: string) {
        this.opts = this.defaultOpts.filter((item: Option) => {
          return item.label.toLowerCase().includes(query.toLowerCase());
        });
      },
    },
    template: `
      <AutocompleteField
        name="test"
        v-bind="args"
        :options="opts"
        @query="onQueryHandler"
      />
    `,
  }),
};
