import type { Meta, StoryObj } from '@storybook/vue3';
import readme from './README.md?raw';

import Paginator from './Paginator.vue';
import LoadMore from './LoadMore.vue';
import useIcons from '@/providers/icons';

// More on how to set up stories at: https://storybook.js.org/docs/vue/writing-stories/introduction
const meta = {
  title: 'View/Paginator',
  component: Paginator,
  // This component will have an automatically generated docsPage entry: https://storybook.js.org/docs/vue/writing-docs/autodocs
  tags: ['autodocs'],
  parameters: {
    docs: {
      description: { component: readme },
    },
  },
  argTypes: {},
  args: {
    currentPage: 5,
    totalPages: 10,
  }, // default value
  render: (args) => ({
    components: { Paginator },
    setup() {
      const provider = useIcons();
      provider.setupIconConfig({
        font: 'las',
        prefix: 'la-',
        iconMap: {},
      });
      return { args };
    },
    template: `
      <Paginator v-bind="args" />
    `,
  }),
} satisfies Meta<typeof Paginator>;

export default meta;
type Story = StoryObj<typeof meta>;
/*
 *ðŸ‘‡ Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/vue/api/csf
 * to learn how to use render functions.
 */
export const Default: Story = {
  args: {},
};

export const LoadMoreButton: Story = {
  args: {},
  render: (args) => ({
    components: { LoadMore },
    setup() {
      return { args };
    },
    methods: {
      changeHandler(page: number) {
        alert(page);
      },
    },
    template: `
      <LoadMore v-bind="args" @change="changeHandler" />
    `,
  }),
};
