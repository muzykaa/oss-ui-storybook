import type { Meta, StoryObj } from '@storybook/vue3';

import TableView from './TableView.vue';
import readme from './README.md?raw';

// More on how to set up stories at: https://storybook.js.org/docs/vue/writing-stories/introduction
const meta = {
  title: 'View/Table',
  component: TableView,
  // This component will have an automatically generated docsPage entry: https://storybook.js.org/docs/vue/writing-docs/autodocs
  tags: ['autodocs'],
  argTypes: {},
  parameters: {
    docs: {
      description: { component: readme },
    },
  },
  args: {
    header: [
      { key: 'name', label: 'Name' },
      { key: 'age', label: 'Age' },
    ],
    data: [
      { name: 'Name 1', age: 20 },
      { name: 'Name 2', age: 32 },
      { name: 'Name 3', age: 34 },
      { name: 'Name 4', age: 53 },
      { name: 'Name 5', age: 55 },
    ],
    keygen: (param: unknown) => {
      const item = param as { name: string; age: string };

      return `${item.name}-${item.age}`;
    },
  }, // default value
} satisfies Meta<typeof TableView>;

export default meta;
type Story = StoryObj<typeof meta>;
/*
 *ðŸ‘‡ Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/vue/api/csf
 * to learn how to use render functions.
 */
export const Default: Story = {
  args: {},
};

export const RowSlot: Story = {
  args: {},
  render: (args) => ({
    components: { TableView },
    setup() {
      return { args };
    },
    template: `
      <TableView v-bind="args" >
        <template #row="item">
          <td><h1>{{item.row.name}}</h1></td>
          <td><input type="number" :value="item.row.age"></td>
        </template>
      </TableView>
    `,
  }),
};

export const CellSlot: Story = {
  args: {},
  render: (args) => ({
    components: { TableView },
    setup() {
      return { args };
    },
    template: `
      <TableView v-bind="args" >
        <template #cell-age="cell">
          <input :value="cell.cell" />
        </template>
      </TableView>
    `,
  }),
};
