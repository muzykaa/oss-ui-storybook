import type { Meta, StoryObj } from '@storybook/vue3';

import TableView from '../../components/viewers/TableView/TableView.vue';
import Icon from '../../components/viewers/Icon/Icon.vue';
import ContextMenu from '../../components/widgets/ContextMenu/ContextMenu.vue';
import PageHeader from '../../components/layout/PageHeader/PageHeader.vue';
import Header from '@/stories/WebFilesProto/components/Header.vue';
import Panel from '../../components/layout/Panel/Panel.vue';
import Popup from '../../components/viewers/Popup/Popup.vue';
import SelectField from '@/components/form/SelectField';
import TextField from '@/components/form/TextField/TextField.vue';
import Checkbox from '@/components/form/Checkbox/Checkbox.vue';
import Grid from '@/components/layout/Grid';
import { provide } from 'vue';
import { Sorting } from '../../enum/Sorting';

// More on how to set up stories at: https://storybook.js.org/docs/vue/writing-stories/introduction
const meta = {
  title: 'WebFilesProto/Audit Log',
  component: TableView,
  // This component will have an automatically generated docsPage entry: https://storybook.js.org/docs/vue/writing-docs/autodocs
  tags: ['autodocs'],
  argTypes: {},
  args: {
    header: [
      { key: 'action', label: 'Action', sorting: Sorting.DESC },
      { key: 'description', label: 'Description', sorting: Sorting.DESC },
      { key: 'date', label: 'Date' },
      { key: 'entityType', label: 'Entity Type' },
      { key: 'user', label: 'User' },
    ],
    data: [
      {
        level: '0',
        action: 'Edited File Node',
        description: '[ My test file ] was [ EDITED ]. [ file ] has been made [ PRIVATE ]',
        date: '2024-02-22 17:24:18',
        entityType: 'My test file',
        user: { userId: 'myid23', userEmail: 'example@mail.com' },
        rid: { id1: '2434343', id2: '43854545' },
      },
      {
        level: '0',
        action: 'Edited File Node',
        description: '[ My test file ] was [ EDITED ]. [ file ] has been made [ PRIVATE ]',
        date: '2024-02-22 17:24:18',
        entityType: 'My test file',
        user: { userId: 'myid23', userEmail: 'example@mail.com' },
        rid: { id1: '2434343', id2: '43854545' },
      },
      {
        level: '0',
        action: 'Edited File Node',
        description: '[ My test file ] was [ EDITED ]. [ file ] has been made [ PRIVATE ]',
        date: '2024-02-22 17:24:18',
        entityType: 'My test file',
        user: { userId: 'myid23', userEmail: 'example@mail.com' },
        rid: { id1: '2434343', id2: '43854545' },
      },
      {
        level: '0',
        action: 'Edited File Node',
        description: '[ My test file ] was [ EDITED ]. [ file ] has been made [ PRIVATE ]',
        date: '2024-02-22 17:24:18',
        entityType: 'My test file',
        user: { userId: 'myid23', userEmail: 'example@mail.com' },
        rid: { id1: '2434343', id2: '43854545' },
      },
    ],
    keygen: (param: unknown) => {
      const item = param as { name: string; age: string };

      return `${item.name}-${item.age}`;
    },
  }, // default value
} satisfies Meta<typeof TableView>;

export default meta;
type Story = StoryObj<typeof meta>;
/*
 *ðŸ‘‡ Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/vue/api/csf
 * to learn how to use render functions.
 */
export const Default: Story = {
  args: {},
  render: (args) => ({
    components: {
      TableView,
      ContextMenu,
      Icon,
      PageHeader,
      SelectField,
      Grid,
      TextField,
      Header,
      Popup,
      Panel,
      Checkbox,
    },
    setup() {
      provide('icon-font-config', {
        font: 'las',
        prefix: 'la-',
        iconMap: {},
      });

      return {
        args,
        actionName: [
          { code: 'equal', label: 'Is equal to' },
          { code: 'notequal', label: 'Is not equal' },
        ],
        filter: [
          { code: 'any', label: '-Any-' },
          { code: 'upload', label: 'Upload file' },
          { code: 'delete', label: 'Delete file' },
          { code: 'created', label: 'Created file node' },
          { code: 'edit', label: 'Edited file node' },
          { code: 'deleteNode', label: 'Delete file node' },
          { code: 'expiration', label: 'File expiration' },
        ],
      };
    },
    template: `
      <div class="main">
        <Header></Header>
        <PageHeader title="Audit log">
          <template #default>
            <button class="button">CSV</button>
            <button class="button">XLXS</button>
          </template>
        </PageHeader>
          <div class="container">
            <Panel class="panel">
            <TextField name="search" label="Date" placeholder="Min"></TextField>
            <TextField name="search" placeholder="Max"></TextField>
            <div>Use range between desired date and next day.</div>
            <TextField name="search" label="Message Data" placeholder="Entity ID"></TextField>
            <TextField name="search" placeholder="Entity title contains"></TextField>
            <TextField name="search" placeholder="Description contains"></TextField>
            <TextField name="search" label="User Data" placeholder="Username or email"></TextField>
            <SelectField name="search" :options="actionName" label="Action name"></SelectField>
            <SelectField name="search" :options="filter"></SelectField>
            <button class="button">Apply</button>
            </Panel>
          </div>
        <div class="container">
          <TableView v-bind="args" >
            <template #cell-user="cell">
              <div>User ID {{cell.cell.userId}}</div>
              <div>User email {{cell.cell.email}}</div>
            </template>
            <template #cell-rid="cell">
              <div>{{cell.cell.id1}}</div>
              <div>{{cell.cell.id2}}</div>
            </template>
          </TableView>
        </div>
      </div>
    `,
  }),
};
