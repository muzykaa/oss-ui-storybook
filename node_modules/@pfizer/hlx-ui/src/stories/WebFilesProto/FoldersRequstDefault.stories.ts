import type { Meta, StoryObj } from '@storybook/vue3';

import TableView from '../../components/viewers/TableView/TableView.vue';
import Icon from '../../components/viewers/Icon/Icon.vue';
import ContextMenu from '../../components/widgets/ContextMenu/ContextMenu.vue';
import PageHeader from '../../components/layout/PageHeader/PageHeader.vue';
import Header from '@/stories/WebFilesProto/components/Header.vue';
import Panel from '../../components/layout/Panel/Panel.vue';
import Popup from '../../components/viewers/Popup/Popup.vue';
import SelectField from '@/components/form/SelectField';
import TextField from '@/components/form/TextField/TextField.vue';
import Checkbox from '@/components/form/Checkbox/Checkbox.vue';
import Grid from '@/components/layout/Grid';
import { provide } from 'vue';
import { Sorting } from '../../enum/Sorting';

// More on how to set up stories at: https://storybook.js.org/docs/vue/writing-stories/introduction
const meta = {
  title: 'WebFilesProto/Folders Request',
  component: TableView,
  // This component will have an automatically generated docsPage entry: https://storybook.js.org/docs/vue/writing-docs/autodocs
  tags: ['autodocs'],
  argTypes: {},
  args: {
    header: [
      { key: 'folderName', label: 'Folder name', sorting: Sorting.ASC },
      { key: 'requestedBy', label: 'Requested by', sorting: Sorting.DESC },
      { key: 'location', label: 'Location', sorting: Sorting.DESC },
      { key: 'subFolders', label: 'Sub-folders' },
      { key: 'date', label: 'Date' },
      { key: 'status', label: 'Status' },
      { key: 'action', label: '' },
    ],
    data: [
      {
        folderName: 'Folder name 1',
        requestedBy: 'test username',
        location: "Home test username's folder",
        subFolders: 'subfoldername, subfoldername2',
        date: 'Feb 14 2024 - 6:07pm',
        status: 'open',
      },
      {
        folderName: 'Folder name 1',
        requestedBy: 'test username',
        location: "Home test username's folder",
        subFolders: 'subfoldername, subfoldername2',
        date: 'Feb 14 2024 - 6:07pm',
        status: 'open',
      },
      {
        folderName: 'Folder name 1',
        requestedBy: 'test username',
        location: "Home test username's folder",
        subFolders: 'subfoldername, subfoldername2',
        date: 'Feb 14 2024 - 6:07pm',
        status: 'open',
      },
      {
        folderName: 'Folder name 1',
        requestedBy: 'test username',
        location: "Home test username's folder",
        subFolders: 'subfoldername, subfoldername2',
        date: 'Feb 14 2024 - 6:07pm',
        status: 'open',
      },
    ],
    keygen: (param: unknown) => {
      const item = param as { name: string; age: string };

      return `${item.name}-${item.age}`;
    },
  }, // default value
} satisfies Meta<typeof TableView>;

export default meta;
type Story = StoryObj<typeof meta>;
/*
 *ðŸ‘‡ Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/vue/api/csf
 * to learn how to use render functions.
 */
export const Default: Story = {
  args: {},
  render: (args) => ({
    components: {
      TableView,
      ContextMenu,
      Icon,
      PageHeader,
      SelectField,
      Grid,
      TextField,
      Header,
      Popup,
      Panel,
      Checkbox,
    },
    setup() {
      provide('icon-font-config', {
        font: 'las',
        prefix: 'la-',
        iconMap: {},
      });

      return {
        args,
        items: [
          { title: 'Approve', key: 'apply', icon: 'check' },
          { title: 'Decline', key: 'decline', icon: 'times-circle' },
        ],
        adminTools: [
          { code: 'userManagement', title: 'User management' },
          { code: 'auditLog', title: 'Audit log' },
          { code: 'backupLogs', title: 'Backup logs' },
          { code: 'folderRequests', title: 'Folder requests' },
        ],
        settings: [
          { code: 'userEdit', title: 'User edit' },
          { code: 'myAuditLog', title: 'My audit log' },
          { code: 'fileReschedule', title: 'File reschedule' },
          { code: 'fileSubscriptions', title: 'File subscriptions' },
          { code: 'search', title: 'Search' },
          { code: 'userInstruction', title: 'User instruction' },
        ],
        showPopup: false,
      };
    },
    methods: {
      changeButtonState() {
        this.args.showPopup = !this.args.showPopup;
      },
    },
    template: `
      <div class="main">
        <Header></Header>
        <PageHeader title="New Folder requests">
          <template #default>
          </template>
        </PageHeader>
        <div class="container">
          <TableView v-bind="args" >
            <template #cell-action="cell">
              <ContextMenu :items="items" @action="changeButtonState">
                <Icon name="ellipsis-v" />
              </ContextMenu>
            </template>
          </TableView>
        </div>
      </div>
    `,
  }),
};
