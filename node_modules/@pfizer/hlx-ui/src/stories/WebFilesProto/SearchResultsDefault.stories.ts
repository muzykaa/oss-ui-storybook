import type { Meta, StoryObj } from '@storybook/vue3';

import TableView from '../../components/viewers/TableView/TableView.vue';
import Icon from '../../components/viewers/Icon/Icon.vue';
import ContextMenu from '../../components/widgets/ContextMenu/ContextMenu.vue';
import PageHeader from '../../components/layout/PageHeader/PageHeader.vue';
import Header from '@/stories/WebFilesProto/components/Header.vue';
import Panel from '../../components/layout/Panel/Panel.vue';
import Popup from '../../components/viewers/Popup/Popup.vue';
import SelectField from '@/components/form/SelectField';
import TextField from '@/components/form/TextField/TextField.vue';
import Checkbox from '@/components/form/Checkbox/Checkbox.vue';
import Grid from '@/components/layout/Grid';
import { provide } from 'vue';
import { Sorting } from '../../enum/Sorting';

// More on how to set up stories at: https://storybook.js.org/docs/vue/writing-stories/introduction
const meta = {
  title: 'WebFilesProto/Search Results',
  component: TableView,
  // This component will have an automatically generated docsPage entry: https://storybook.js.org/docs/vue/writing-docs/autodocs
  tags: ['autodocs'],
  argTypes: {},
  args: {
    header: [
      { key: 'title', label: 'Title', sorting: Sorting.ASC },
      { key: 'fileName', label: 'File Name', sorting: Sorting.DESC },
      { key: 'fileType', label: 'File type', sorting: Sorting.DESC },
      { key: 'status', label: 'Status' },
      { key: 'lastUpdated', label: 'Last Updated' },
      { key: 'fileSize', label: 'File Size' },
      { key: 'action', label: '' },
    ],
    data: [
      {
        title: 'Folder name 1',
        fileName: '-',
        fileType: 'FOLDER',
        status: 'Published',
        lastUpdated: 'Feb 14 2024 - 6:07pm',
        fileSize: '',
      },
      {
        title: 'Folder name 1',
        fileName: '-',
        fileType: 'FOLDER',
        status: 'Published',
        lastUpdated: 'Feb 14 2024 - 6:07pm',
        fileSize: '',
      },
      {
        title: 'Folder name 1',
        fileName: '-',
        fileType: 'FOLDER',
        status: 'Published',
        lastUpdated: 'Feb 14 2024 - 6:07pm',
        fileSize: '',
      },
      {
        title: 'Folder name 1',
        fileName: '-',
        fileType: 'FOLDER',
        status: 'Published',
        lastUpdated: 'Feb 14 2024 - 6:07pm',
        fileSize: '',
      },
      {
        title: 'Folder name 1',
        fileName: '-',
        fileType: 'FOLDER',
        status: 'Published',
        lastUpdated: 'Feb 14 2024 - 6:07pm',
        fileSize: '',
      },
    ],
    keygen: (param: unknown) => {
      const item = param as { name: string; age: string };

      return `${item.name}-${item.age}`;
    },
  }, // default value
} satisfies Meta<typeof TableView>;

export default meta;
type Story = StoryObj<typeof meta>;
/*
 *ðŸ‘‡ Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/vue/api/csf
 * to learn how to use render functions.
 */
export const Default: Story = {
  args: {},
  render: (args) => ({
    components: {
      TableView,
      ContextMenu,
      Icon,
      PageHeader,
      SelectField,
      Grid,
      TextField,
      Header,
      Popup,
      Panel,
      Checkbox,
    },
    setup() {
      provide('icon-font-config', {
        font: 'las',
        prefix: 'la-',
        iconMap: {},
      });

      return {
        args,
        items: [
          { title: 'Edit', key: 'edit', icon: 'edit' },
          { title: 'Move', key: 'move', icon: 'exchange-alt' },
          { title: 'Unpublish', key: 'unpublish', icon: 'unlink' },
          { title: 'Delete', key: 'delete', icon: 'trash' },
          { title: 'Share Url', key: 'share', icon: 'share-alt' },
          { title: 'Information', key: 'info', icon: 'info-circle' },
          { title: 'History', key: 'history', icon: 'history' },
        ],
        adminTools: [
          { code: 'userManagement', title: 'User management' },
          { code: 'auditLog', title: 'Audit log' },
          { code: 'backupLogs', title: 'Backup logs' },
          { code: 'folderRequests', title: 'Folder requests' },
        ],
        settings: [
          { code: 'userEdit', title: 'User edit' },
          { code: 'myAuditLog', title: 'My audit log' },
          { code: 'fileReschedule', title: 'File reschedule' },
          { code: 'fileSubscriptions', title: 'File subscriptions' },
          { code: 'search', title: 'Search' },
          { code: 'userInstruction', title: 'User instruction' },
        ],
        currentFolder: [
          { code: 'this', label: 'This Folder' },
          { code: 'all', label: 'All Folders' },
        ],
        status: [
          { code: 'any', label: '-Any-' },
          { code: 'published', label: 'Published' },
          { code: 'unpublished', label: 'Unpublished' },
        ],
        size: [
          { code: 'any', label: '-Any-' },
          { code: '500kb', label: '<500kb' },
          { code: '500-1000kb', label: '500-1000kb' },
          { code: '1-1,5MB', label: '1-1,5MB' },
          { code: '5MB', label: '+5MB' },
        ],
        type: [
          { code: 'any', label: '-Any-' },
          { code: 'folder', label: 'FOLDER' },
          { code: 'interactive', label: 'INTERACTIVE' },
        ],
        temp: [
          { title: 'test', key: 'test' },
          { title: 'test', key: 'test' },
          { title: 'test', key: 'test' },
        ],
        showPopup: false,
      };
    },
    methods: {
      changeButtonState() {
        this.args.showPopup = !this.args.showPopup;
      },
    },
    template: `
      <div class="main">
        <Header></Header>
        <PageHeader title="Search">
        </PageHeader>
        <Popup :model-value="args.showPopup" title="Add Folder">
          <template #content>
            <div class="inputs-block">
            <TextField name="name" label="Folder Name"></TextField>
            </div>
          </template>
          <template #actions>
            <button class="secondary" @click.prevent="changeButtonState">
              Cancel
            </button>
            <button @click.prevent="changeButtonState">Create</button>
          </template>
        </Popup>
          <div class="container">
            <Panel class="panel">
            <TextField name="search" label="Search for title"></TextField>
            <SelectField name="search" :options="status" label="Status"></SelectField>
            <SelectField name="search" :options="size" label="Size"></SelectField>
            <SelectField name="search" :options="type" label="Type"></SelectField>
            </Panel>
          </div>
        <div class="container">
          <TableView v-bind="args" >
            <template #cell-action="cell">
              <ContextMenu :items="items" @action="changeButtonState">
                <Icon name="ellipsis-v" />
              </ContextMenu>
            </template>
          </TableView>
        </div>
      </div>
    `,
  }),
};
