import type { Meta, StoryObj } from '@storybook/vue3';

import TableView from '../../components/viewers/TableView/TableView.vue';
import Icon from '../../components/viewers/Icon/Icon.vue';
import ContextMenu from '../../components/widgets/ContextMenu/ContextMenu.vue';
import PageHeader from '../../components/layout/PageHeader/PageHeader.vue';
import TopNavBar from '../../components/layout/TopNavBar/TopNavBar.vue';
import TopServiceBar from '../../components/layout/TopServiceBar/TopServiceBar.vue';
import SelectField from '@/components/form/SelectField';
import TextField from '@/components/form/TextField/TextField.vue';
import Grid from '@/components/layout/Grid';
import { provide } from 'vue';
import { Sorting } from '../../enum/Sorting';

// More on how to set up stories at: https://storybook.js.org/docs/vue/writing-stories/introduction
const meta = {
  title: 'WebFilesProto/User List Page',
  component: TableView,
  // This component will have an automatically generated docsPage entry: https://storybook.js.org/docs/vue/writing-docs/autodocs
  tags: ['autodocs'],
  argTypes: {},
  args: {
    header: [
      { key: 'userName', label: 'User Name', sorting: Sorting.ASC },
      { key: 'roles', label: 'Roles', sorting: Sorting.BOTH },
      { key: 'folders', label: 'Folders', sorting: Sorting.BOTH },
      { key: 'status', label: 'Status', sorting: Sorting.BOTH },
      { key: 'sponsor', label: 'Sponsor', sorting: Sorting.BOTH },
      { key: 'action', label: '' },
    ],
    data: [
      {
        userName: { email: 'qwerty@gmail.com', userId: '22223434' },
        roles: '',
        folders: ['Folder name 1', 'Folder name 1', 'Folder name 1', 'Folder name 1', 'Folder name 1', 'Folder name 1'],
        status: 'Published',
        sponsor: 'Sponsor name',
      },
      {
        userName: { email: 'qwerty@gmail.com', userId: '22223434' },
        roles: '',
        folders: ['Folder name 1', 'Folder name 1', 'Folder name 1', 'Folder name 1', 'Folder name 1', 'Folder name 1'],
        status: 'Published',
        sponsor: 'Sponsor name',
      },
      {
        userName: { email: 'qwerty@gmail.com', userId: '22223434' },
        roles: '',
        folders: ['Folder name 1', 'Folder name 1', 'Folder name 1', 'Folder name 1', 'Folder name 1', 'Folder name 1'],
        status: 'Published',
        sponsor: 'Sponsor name',
      },
      {
        userName: { email: 'qwerty@gmail.com', userId: '22223434' },
        roles: '',
        folders: ['Folder name 1', 'Folder name 1', 'Folder name 1', 'Folder name 1', 'Folder name 1', 'Folder name 1'],
        status: 'Published',
        sponsor: 'Sponsor name',
      },
      {
        userName: { email: 'qwerty@gmail.com', userId: '22223434' },
        roles: '',
        folders: ['Folder name 1', 'Folder name 1', 'Folder name 1', 'Folder name 1', 'Folder name 1', 'Folder name 1'],
        status: 'Published',
        sponsor: 'Sponsor name',
      },
    ],
    keygen: (param: unknown) => {
      const item = param as { name: string; age: string };

      return `${item.name}-${item.age}`;
    },
  }, // default value
} satisfies Meta<typeof TableView>;

export default meta;
type Story = StoryObj<typeof meta>;
/*
 *ðŸ‘‡ Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/vue/api/csf
 * to learn how to use render functions.
 */
export const Default: Story = {
  args: {},
  render: (args) => ({
    components: { TableView, ContextMenu, Icon, PageHeader, SelectField, Grid, TextField, TopNavBar, TopServiceBar },
    setup() {
      provide('icon-font-config', {
        font: 'las',
        prefix: 'la-',
        iconMap: {},
      });

      return {
        args,
        items: [
          { title: 'View', key: 'view', icon: 'eye' },
          { title: 'Edit', key: 'edit', icon: 'edit' },
          { title: 'Delete', key: 'delete', icon: 'trash' },
        ],
        adminTools: [
          { code: 'userManagement', label: 'User management' },
          { code: 'auditLog', label: 'Audit log' },
          { code: 'backupLogs', label: 'Backup logs' },
          { code: 'folderRequests', label: 'Folder requests' },
        ],
        settings: [
          { code: 'userEdit', label: 'User edit' },
          { code: 'myAuditLog', label: 'My audit log' },
          { code: 'fileReschedule', label: 'File reschedule' },
          { code: 'fileSubscriptions', label: 'File subscriptions' },
          { code: 'search', label: 'Search' },
          { code: 'userInstruction', label: 'User instruction' },
        ],
        search: [
          { code: 'any', label: '-Any-' },
          { code: 'blocked', label: 'Blocked' },
          { code: 'active', label: 'Active' },
        ],
        temp: [
          { title: 'test', key: 'test' },
          { title: 'test', key: 'test' },
          { title: 'test', key: 'test' },
        ],
      };
    },
    methods: {
      actionHandler(key: string) {
        alert(key);
      },
    },
    template: `
      <div class="main">
        <TopServiceBar>
        </TopServiceBar>
        <TopNavBar link="#" logo="./assets/logo.svg">
          <template #default>
          <div>User Info</div>

          <button class="button secondary">Sign out</button>
          </template>
        </TopNavBar>
        <PageHeader title="User Management">
          <template #default>
            <button class="button" @click.prevent="downloadCsv">Add User</button>
          </template>
        </PageHeader>
          <div class="container">
            <div class="filters">
            <TextField class="filters__search_name" name="search" label="Search name"></TextField>
            <TextField class="filters__search_email" name="search" label="Filter email" placeholder="Email"></TextField>
            <SelectField class="filters__type" name="search" :options="search"></SelectField>
            </div>
          </div>
        <div class="container">
          <TableView v-bind="args" >
            <template #cell-userName="cell">
              {{cell.cell.userId}}
              {{cell.cell.email}}
            </template>
            <template #cell-folders="cell">
              {{cell.cell.join(',')}}
            </template>
            <template #cell-action="cell">
              <ContextMenu :items="items" @action="actionHandler">
                <Icon name="ellipsis-v" />
              </ContextMenu>
            </template>
          </TableView>
        </div>
      </div>
    `,
  }),
};
