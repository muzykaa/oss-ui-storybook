import type { Meta, StoryObj } from '@storybook/vue3';

import TableView from '../../components/viewers/TableView/TableView.vue';
import Icon from '../../components/viewers/Icon/Icon.vue';
import ContextMenu from '../../components/widgets/ContextMenu/ContextMenu.vue';
import PageHeader from '../../components/layout/PageHeader/PageHeader.vue';
import Header from '@/stories/WebFilesProto/components/Header.vue';
import DateField from '@/components/form/DateField/DateField.vue';
import TextAreaField from '@/components/form/TextAreaField/TextAreaField.vue';
import Panel from '../../components/layout/Panel/Panel.vue';
import Popup from '../../components/viewers/Popup/Popup.vue';
import SelectField from '@/components/form/SelectField';
import TextField from '@/components/form/TextField/TextField.vue';
import Checkbox from '@/components/form/Checkbox/Checkbox.vue';
import Grid from '@/components/layout/Grid';
import DirectoriesList from './components/DirectoriesList.vue';
import { provide } from 'vue';
import { Sorting } from '../../enum/Sorting';

// More on how to set up stories at: https://storybook.js.org/docs/vue/writing-stories/introduction
const meta = {
  title: 'WebFilesProto/Folder open',
  component: TableView,
  // This component will have an automatically generated docsPage entry: https://storybook.js.org/docs/vue/writing-docs/autodocs
  tags: ['autodocs'],
  argTypes: {},
  args: {
    header: [
      { key: 'title', label: 'Title', sorting: Sorting.ASC },
      { key: 'fileName', label: 'File Name', sorting: Sorting.DESC },
      { key: 'fileType', label: 'File type', sorting: Sorting.DESC },
      { key: 'status', label: 'Status' },
      { key: 'lastUpdated', label: 'Last Updated' },
      { key: 'fileSize', label: 'File Size' },
      { key: 'action', label: '' },
    ],
    data: [
      {
        title: 'Folder name 1',
        fileName: '-',
        fileType: 'FOLDER',
        status: 'Published',
        lastUpdated: 'Feb 14 2024 - 6:07pm',
        fileSize: '',
      },
      {
        title: 'File name 1',
        fileName: '-',
        fileType: 'FILE',
        status: 'Published',
        lastUpdated: 'Feb 14 2024 - 6:07pm',
        fileSize: '',
      },
      {
        title: 'Folder name 1',
        fileName: '-',
        fileType: 'FOLDER',
        status: 'Published',
        lastUpdated: 'Feb 14 2024 - 6:07pm',
        fileSize: '',
      },
      {
        title: 'Folder name 1',
        fileName: '-',
        fileType: 'FOLDER',
        status: 'Published',
        lastUpdated: 'Feb 14 2024 - 6:07pm',
        fileSize: '',
      },
      {
        title: 'Folder name 1',
        fileName: '-',
        fileType: 'FOLDER',
        status: 'Published',
        lastUpdated: 'Feb 14 2024 - 6:07pm',
        fileSize: '',
      },
    ],
    keygen: (param: unknown) => {
      const item = param as { name: string; age: string };

      return `${item.name}-${item.age}`;
    },
  }, // default value
} satisfies Meta<typeof TableView>;

export default meta;
type Story = StoryObj<typeof meta>;
/*
 *ðŸ‘‡ Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/vue/api/csf
 * to learn how to use render functions.
 */
export const Default: Story = {
  args: {},
  render: (args) => ({
    components: {
      TableView,
      ContextMenu,
      Icon,
      PageHeader,
      SelectField,
      Grid,
      TextField,
      Header,
      Popup,
      Panel,
      Checkbox,
      DirectoriesList,
      DateField,
      TextAreaField,
    },
    setup() {
      provide('icon-font-config', {
        font: 'las',
        prefix: 'la-',
        iconMap: {},
      });

      return {
        args,
        permissionHeader: [
          { key: 'userAcc', label: 'User account' },
          { key: 'action', label: 'Action' },
        ],
        permissionData: [{ userAcc: 'Test username', action: 'Remove X' }],
        fileInfoHeader: [
          { key: 'referrer', label: 'Referrer' },
          { key: 'count', label: 'Count' },
        ],
        fileInfoData: [
          { referrer: 'Email', count: '4' },
          { referrer: 'Email: test', count: '5' },
          { referrer: 'Print: ss', count: '4' },
          { referrer: 'Webpage', count: '5' },
          { referrer: 'Default public link', count: '12' },
        ],
        fileHistoryHeader: [
          { key: 'logMsg', label: 'Log message' },
          { key: 'date', label: 'Date' },
          { key: 'user', label: 'User' },
          { key: 'actions', label: 'Actions' },
          { key: 'copy', label: 'Copy URL' },
        ],
        fileHistoryData: [
          {
            logMsg: 'Automatic content unpublish due to expiration',
            date: 'Feb 26 2024 - 5:16pm',
            user: 'username',
            actions: 'Current revision',
            copy: 'Copy',
          },
          {
            logMsg: 'Automatic content unpublish due to expiration',
            date: 'Feb 26 2024 - 5:16pm',
            user: 'username',
            actions: 'Revert',
            copy: 'Copy',
          },
          {
            logMsg: 'Automatic content unpublish due to expiration',
            date: 'Feb 26 2024 - 5:16pm',
            user: 'username',
            actions: 'Revert',
            copy: 'Copy',
          },
          {
            logMsg: 'Automatic content unpublish due to expiration',
            date: 'Feb 26 2024 - 5:16pm',
            user: 'username',
            actions: 'Revert',
            copy: 'Copy',
          },
        ],
        items: [
          { title: 'Edit', key: 'edit', icon: 'edit' },
          { title: 'Export to excel', key: 'export', icon: 'file-excel' },
          { title: 'Move', key: 'move', icon: 'exchange-alt' },
          { title: 'Permissions', key: 'permissions', icon: 'unlock' },
          { title: 'Audit logs', key: 'logs', icon: 'history' },
        ],
        directoriesList: [
          {
            text: 'Folder 1',
            children: [
              {
                text: 'Sub folder 1',
              },
              {
                text: 'Sub folder 2',
              },
            ],
          },
          {
            text: 'Folder 2',
            children: [
              {
                text: 'Sub folder 1',
              },
            ],
          },
          {
            text: 'Folder 3',
            children: [],
          },
        ],
        itemsFile: [
          { title: 'Edit', key: 'edit', icon: 'edit' },
          { title: 'Move', key: 'move', icon: 'exchange-alt' },
          { title: 'Unpublish', key: 'unpublish', icon: 'unlink' },
          { title: 'Delete', key: 'delete', icon: 'trash' },
          { title: 'Share Url', key: 'share', icon: 'share-alt' },
          { title: 'Information', key: 'info', icon: 'info-circle' },
          { title: 'History', key: 'history', icon: 'history' },
        ],
        adminTools: [
          { code: 'userManagement', title: 'User management' },
          { code: 'auditLog', title: 'Audit log' },
          { code: 'backupLogs', title: 'Backup logs' },
          { code: 'folderRequests', title: 'Folder requests' },
        ],
        settings: [
          { code: 'userEdit', title: 'User edit' },
          { code: 'myAuditLog', title: 'My audit log' },
          { code: 'fileReschedule', title: 'File reschedule' },
          { code: 'fileSubscriptions', title: 'File subscriptions' },
          { code: 'search', title: 'Search' },
          { code: 'userInstruction', title: 'User instruction' },
        ],
        currentFolder: [
          { code: 'this', label: 'This Folder' },
          { code: 'all', label: 'All Folders' },
        ],
        status: [
          { code: 'any', label: '-Any-' },
          { code: 'published', label: 'Published' },
          { code: 'unpublished', label: 'Unpublished' },
        ],
        size: [
          { code: 'any', label: '-Any-' },
          { code: '500kb', label: '<500kb' },
          { code: '500-1000kb', label: '500-1000kb' },
          { code: '1-1,5MB', label: '1-1,5MB' },
          { code: '5MB', label: '+5MB' },
        ],
        type: [
          { code: 'any', label: '-Any-' },
          { code: 'folder', label: 'FOLDER' },
          { code: 'interactive', label: 'INTERACTIVE' },
        ],
        temp: [
          { title: 'test', key: 'test' },
          { title: 'test', key: 'test' },
          { title: 'test', key: 'test' },
        ],
        showPopup: false,
        showFilePopup: false,
        showEditPopup: false,
        showMovePopup: false,
        showUnpublisPopup: false,
        showDeletePopup: false,
        showSharePopup: false,
        showInfoPopup: false,
        showSubscribePopup: false,
      };
    },
    methods: {
      changeButtonState(key: string) {
        if (key == 'folder') {
          this.args.showPopup = !this.args.showPopup;
        } else {
          this.args.showFilePopup = !this.args.showFilePopup;
        }
      },
      clickContext(key: string) {
        switch (key) {
          case 'edit':
            this.args.showEditPopup = !this.args.showEditPopup;
            break;
          case 'move':
            this.args.showMovePopup = !this.args.showMovePopup;
            break;
          case 'unpublish':
            this.args.showUnpublisPopup = !this.args.showUnpublisPopup;
            break;
          case 'delete':
            this.args.showDeletePopup = !this.args.showDeletePopup;
            break;
          case 'permissions':
            this.args.showSharePopup = !this.args.showSharePopup;
            break;
          case 'info':
            this.args.showInfoPopup = !this.args.showInfoPopup;
            break;
          case 'history':
            this.args.showHistoryPopup = !this.args.showHistoryPopup;
            break;
          case 'subscribe':
            this.args.showSubscribePopup = !this.args.showSubscribePopup;
            break;
        }
      },
    },
    template: `
      <div class="main">
        <Header></Header>
        <PageHeader title="Folder 1">
          <template #default>
            <button class="button" @click.prevent="changeButtonState('folder')">Add Folder</button>
            <button class="button" @click.prevent="changeButtonState('file')">Add File</button>
          </template>
        </PageHeader>
        <Popup :model-value="args.showPopup" title="Add Folder">
          <template #content>
            <div class="inputs-block">
            <TextField name="name" label="Folder Name"></TextField>
            </div>
          </template>
          <template #actions>
            <button class="secondary" @click.prevent="changeButtonState('folder')">
              Cancel
            </button>
            <button @click.prevent="changeButtonState('folder')">Create</button>
          </template>
        </Popup>
        <Popup :model-value="args.showFilePopup" title="Add File">
          <template #content>
            <div class="inputs-block">
              <TextField name="title" label="File title" placeholder="Type something"></TextField>
              <TextField name="urlalias" label="URL alias"></TextField>
              <TextField name="gcma" label="GCMA" placeholder="Type GCMA"></TextField>
              <DateField name="expires" label="Expires on"></DateField>
              <div><Checkbox name="agreement"></Checkbox> Please check to acknowledge file(s) uploaded to this platform are accessible to anyone who has the file link regardless of the intended target audience or means of distribution such as email or a password protected website.</div>
              <TextAreaField name="logMessage" label="Revision log message"></TextAreaField>
            </div>
          </template>
          <template #actions>
            <button class="secondary" @click.prevent="changeButtonState('file')">
              Cancel
            </button>
            <button @click.prevent="changeButtonState('file')">Create</button>
          </template>
        </Popup>
        <Popup :model-value="args.showEditPopup" title="Edit">
          <template #content>
            <div class="inputs-block">
              <TextField name="name" label="Folder Name"></TextField>
            </div>
          </template>
          <template #actions>
            <button class="secondary" @click.prevent="()=> this.args.showEditPopup = false">
              Cancel
            </button>
            <button @click.prevent="()=> this.args.showEditPopup = false">Edit</button>
          </template>
        </Popup>
        <Popup :model-value="args.showMovePopup" title="Move Folder">
          <template #content>
            <div class="inputs-block">
              <DirectoriesList :items="directoriesList"></DirectoriesList>
            </div>
          </template>
          <template #actions>
            <button class="secondary" @click.prevent="()=> this.args.showMovePopup = false">
              Cancel
            </button>
            <button @click.prevent="()=> this.args.showMovePopup = false">Edit</button>
          </template>
        </Popup>
        <Popup :model-value="args.showUnpublisPopup" title="Unpublish">
          <template #actions>
            <button class="secondary" @click.prevent="()=> this.args.showUnpublisPopup = false">
              Cancel
            </button>
            <button @click.prevent="()=> this.args.showUnpublisPopup = false">Unpublish</button>
          </template>
        </Popup>
        <Popup :model-value="args.showDeletePopup" title="Delete">
          <template #actions>
            <button class="secondary" @click.prevent="()=> this.args.showDeletePopup = false">
              Cancel
            </button>
            <button @click.prevent="()=> this.args.showDeletePopup = false">Delete</button>
          </template>
        </Popup>
        <Popup :model-value="args.showSharePopup" title="Edit permissions">
          <template #content>
            <div class="inputs-block">
              <TextField name="name" label="Folder Name"></TextField>
              <button class="button">Add Users</button>
            </div>
            <div class="checkbox-panel">
              <TableView :data="permissionData" :header="permissionHeader" :keygen="args.keygen">
              </TableView>
            </div>
          </template>
          <template #actions>
            <button class="secondary" @click.prevent="()=> this.args.showSharePopup = false">
              Done
            </button>
          </template>
        </Popup>
        <Popup :model-value="args.showInfoPopup" title="File info">
          <template #content>
            <div class="checkbox-panel">
              <TableView :data="fileInfoData" :header="fileInfoHeader" :keygen="args.keygen">
              </TableView>
            </div>
          </template>
          <template #actions>
            <button class="secondary" @click.prevent="()=> this.args.showInfoPopup = false">
              Close
            </button>
          </template>
        </Popup>
        <Popup :model-value="args.showHistoryPopup" title="File info">
          <template #content>
            <div class="checkbox-panel">
              <TableView :data="fileHistoryData" :header="fileHistoryHeader" :keygen="args.keygen">
                <template #cell-actions="cell">
                  <div :class="{'link':cell.row.actions=='Revert'}">{{cell.row.actions}}</div>
                </template>
                <template #cell-copy="cell">
                  <div class="link">{{cell.row.copy}} <Icon name="copy"></Icon></div>
                </template>
              </TableView>
            </div>
          </template>
          <template #actions>
            <button class="secondary" @click.prevent="()=> this.args.showHistoryPopup = false">
              Close
            </button>
          </template>
        </Popup>
          <div class="container">
            <Panel class="panel">
            <TextField name="search" label="Search for title"></TextField>
            <SelectField name="search" :options="status" label="Status"></SelectField>
            <SelectField name="search" :options="size" label="Size"></SelectField>
            <SelectField name="search" :options="type" label="Type"></SelectField>
            </Panel>
          </div>
        <div class="container">
          <div class="breadcrumbs"> <span class="breadcrumbs__parent">Home</span> <Icon name="angle-right"></Icon> <span class="breadcrumbs__child">Folder 1</span></div>
          <TableView v-bind="args" >
            <template #cell-action="cell">
              <ContextMenu :items="cell.row.fileType=='FOLDER'?items:itemsFile" @action="clickContext">
                <Icon name="ellipsis-v" />
              </ContextMenu>
            </template>
          </TableView>
        </div>
      </div>
    `,
  }),
};
