import type { Meta, StoryObj } from '@storybook/vue3';

import TableView from '../../components/viewers/TableView/TableView.vue';
import Icon from '../../components/viewers/Icon/Icon.vue';
import ContextMenu from '../../components/widgets/ContextMenu/ContextMenu.vue';
import { provide } from 'vue';
import { Sorting } from '../../enum/Sorting';

// More on how to set up stories at: https://storybook.js.org/docs/vue/writing-stories/introduction
const meta = {
  title: 'Snippet/Basic Table',
  component: TableView,
  // This component will have an automatically generated docsPage entry: https://storybook.js.org/docs/vue/writing-docs/autodocs
  tags: ['autodocs'],
  argTypes: {},
  args: {
    header: [
      { key: 'name', label: 'Name', sorting: Sorting.ASC },
      { key: 'age', label: 'Age', sorting: Sorting.BOTH },
      { key: 'action', label: '' },
    ],
    data: [
      { name: 'Name 1', age: 20 },
      { name: 'Name 2', age: 32 },
      { name: 'Name 3', age: 34 },
      { name: 'Name 4', age: 53 },
      { name: 'Name 5', age: 55 },
    ],
    keygen: (param: unknown) => {
      const item = param as { name: string; age: string };

      return `${item.name}-${item.age}`;
    },
  }, // default value
} satisfies Meta<typeof TableView>;

export default meta;
type Story = StoryObj<typeof meta>;
/*
 *ðŸ‘‡ Render functions are a framework specific feature to allow you control on how the component renders.
 * See https://storybook.js.org/docs/vue/api/csf
 * to learn how to use render functions.
 */
export const Default: Story = {
  args: {},
  render: (args) => ({
    components: { TableView, ContextMenu, Icon },
    setup() {
      provide('icon-font-config', {
        font: 'las',
        prefix: 'la-',
        iconMap: {},
      });

      return {
        args,
        items: [
          { title: 'View', key: 'view', icon: 'eye' },
          { title: 'Edit', key: 'edit', icon: 'edit' },
          { title: 'Delete', key: 'delete', icon: 'trash' },
        ],
      };
    },
    methods: {
      actionHandler(key: string) {
        alert(key);
      },
    },
    template: `
      <TableView v-bind="args" >
        <template #cell-action="cell">
          <ContextMenu :items="items" @action="actionHandler">
            <Icon name="ellipsis-v" />
          </ContextMenu>
        </template>
      </TableView>
    `,
  }),
};
