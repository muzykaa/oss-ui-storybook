import { openDB } from 'idb';
import type { IDBPDatabase } from 'idb';

interface CachedItem {
  value: unknown;
  ttl: number;
}

const TTL_THRESHOLD = 86400;
const STORE_NAME = 'cache';

function getTimestamp(): number {
  return Math.round(Date.now() / 1000);
}

function getCacheStore(): Promise<IDBPDatabase> {
  return openDB('estimator-cache', 1, {
    upgrade(db) {
      db.createObjectStore(STORE_NAME);
    },
  });
}

export async function getCached<T>(
  key: string,
  setter: () => Promise<T>,
  ttlThreshold: number = TTL_THRESHOLD
): Promise<T> {
  const db = await getCacheStore();
  let cachedItem = (await db.get(STORE_NAME, key)) as CachedItem;
  const timestamp = getTimestamp();

  if (!cachedItem || cachedItem.ttl <= timestamp) {
    cachedItem = {
      value: await setter(),
      ttl: getTimestamp() + ttlThreshold,
    };
    await db.put(STORE_NAME, cachedItem, key);
  }

  return cachedItem.value as T;
}

export async function dropCached(key: string): Promise<void> {
  const db = await getCacheStore();
  await db.delete(STORE_NAME, key);
}
