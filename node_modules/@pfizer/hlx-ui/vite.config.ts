import { fileURLToPath, URL } from 'node:url';
import { resolve } from 'node:path';

import { defineConfig } from 'vite';
import vue from '@vitejs/plugin-vue';
import vueJsx from '@vitejs/plugin-vue-jsx';

// https://vitejs.dev/config/
export default defineConfig({
  build: {
    lib: {
      formats: ['es'],
      entry: {
        index: resolve(__dirname, 'src', 'index.ts'),
        Alert: resolve(__dirname, 'src', 'components', 'viewers', 'Alert', 'index.ts'),
        Icon: resolve(__dirname, 'src', 'components', 'viewers', 'Icon', 'index.ts'),
        Flyout: resolve(__dirname, 'src', 'components', 'viewers', 'Flyout', 'index.ts'),
        ContextMenu: resolve(__dirname, 'src', 'components', 'widgets', 'ContextMenu', 'index.ts'),
        ServicesMenu: resolve(__dirname, 'src', 'components', 'widgets', 'ServicesMenu', 'index.ts'),
        Grid: resolve(__dirname, 'src', 'components', 'layout', 'Grid', 'index.ts'),
        TopNavBar: resolve(__dirname, 'src', 'components', 'layout', 'TopNavBar', 'index.ts'),
        TopServiceBar: resolve(__dirname, 'src', 'components', 'layout', 'TopServiceBar', 'index.ts'),
        Cell: resolve(__dirname, 'src', 'components', 'layout', 'Grid', 'cell.ts'),
        ToastStack: resolve(__dirname, 'src', 'components', 'viewers', 'Toast', 'index.ts'),
        Toast: resolve(__dirname, 'src', 'components', 'viewers', 'Toast', 'toast.ts'),
        Popup: resolve(__dirname, 'src', 'components', 'viewers', 'Popup', 'index.ts'),
        Tooltip: resolve(__dirname, 'src', 'components', 'viewers', 'Tooltip', 'index.ts'),
        Skeleton: resolve(__dirname, 'src', 'components', 'viewers', 'Skeleton', 'index.ts'),
        Menu: resolve(__dirname, 'src', 'components', 'viewers', 'Menu', 'index.ts'),
        Overlay: resolve(__dirname, 'src', 'components', 'viewers', 'Overlay', 'index.ts'),
        ListGroup: resolve(__dirname, 'src', 'components', 'viewers', 'ListGroup', 'index.ts'),
        Modal: resolve(__dirname, 'src', 'components', 'viewers', 'Popup', 'modal.ts'),
        Confirmator: resolve(__dirname, 'src', 'components', 'viewers', 'Popup', 'confirmator.ts'),
        StatusTag: resolve(__dirname, 'src', 'components', 'viewers', 'StatusTag', 'index.ts'),
        Preloader: resolve(__dirname, 'src', 'components', 'viewers', 'Preloader', 'index.ts'),
        Avatar: resolve(__dirname, 'src', 'components', 'viewers', 'Avatar', 'index.ts'),
        Property: resolve(__dirname, 'src', 'components', 'viewers', 'Property', 'index.ts'),
        Flex: resolve(__dirname, 'src', 'components', 'layout', 'Flex', 'index.ts'),
        TableView: resolve(__dirname, 'src', 'components', 'viewers', 'TableView', 'index.ts'),
        TableHead: resolve(__dirname, 'src', 'components', 'viewers', 'TableView', 'head.ts'),
        AutocompleteField: resolve(__dirname, 'src', 'components', 'form', 'AutocompleteField', 'index.ts'),
        Checkbox: resolve(__dirname, 'src', 'components', 'form', 'Checkbox', 'index.ts'),
        DateField: resolve(__dirname, 'src', 'components', 'form', 'DateField', 'index.ts'),
        EditorField: resolve(__dirname, 'src', 'components', 'form', 'EditorField', 'index.ts'),
        FileField: resolve(__dirname, 'src', 'components', 'form', 'FileField', 'index.ts'),
        RadioField: resolve(__dirname, 'src', 'components', 'form', 'RadioField', 'index.ts'),
        Paginator: resolve(__dirname, 'src', 'components', 'viewers', 'Paginator', 'index.ts'),
        LoadMore: resolve(__dirname, 'src', 'components', 'viewers', 'Paginator', 'load-more.ts'),
        PageHeader: resolve(__dirname, 'src', 'components', 'layout', 'PageHeader', 'index.ts'),
        useList: resolve(__dirname, 'src', 'composables', 'useList.ts'),
        useForm: resolve(__dirname, 'src', 'composables', 'useForm.ts'),
        useTmplRefs: resolve(__dirname, 'src', 'composables', 'useTmplRefs.ts'),
        useUpsideDown: resolve(__dirname, 'src', 'composables', 'useUpsideDown.ts'),
      },
      name: 'hlx-ui',
      fileName: (format, entryName) => `${entryName}.${format}.js`,
    },
    rollupOptions: {
      external: ['vue', 'lodash'],
      output: {
        globals: {
          vue: 'Vue',
          lodash: 'lodash',
        },
      },
    },
  },
  plugins: [vue(), vueJsx()],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url)),
    },
  },
});
