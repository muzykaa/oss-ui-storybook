import { defineComponent as f, ref as a, openBlock as m, createElementBlock as d, renderSlot as _, createVNode as v, unref as g, withCtx as h, createTextVNode as w, toDisplayString as V } from "vue";
import { _ as x } from "./Flyout.vue_vue_type_style_index_0_lang-0b2ff5ea.mjs";
import { c as C } from "./dom-c1ddc50b.mjs";
const T = /* @__PURE__ */ f({
  __name: "Tooltip",
  props: {
    placement: { default: "top" },
    text: {}
  },
  setup(r) {
    const p = r, n = a(!1), s = a({
      top: 0,
      left: 0
    }), u = (e, t) => {
      const o = C(t), l = t.getBoundingClientRect();
      switch (e) {
        case "bottom":
          return {
            top: l.top + l.height,
            left: o.left
          };
        case "left":
          return {
            top: o.top,
            left: l.left
          };
        case "right":
          return {
            top: o.top,
            left: l.left + l.width
          };
        case "top":
          return {
            top: l.top,
            left: o.left
          };
      }
    }, c = (e) => {
      const t = e.target;
      s.value = u(p.placement, t), n.value = !0, console.log("test", s.value);
    }, i = () => {
      n.value = !1;
    };
    return (e, t) => (m(), d("div", {
      class: "tooltip__wrapper",
      onMouseover: c,
      onMouseout: i
    }, [
      _(e.$slots, "default"),
      v(g(x), {
        modelValue: n.value,
        "onUpdate:modelValue": t[0] || (t[0] = (o) => n.value = o),
        position: s.value,
        "class-name": `tooltip ${e.placement}`
      }, {
        default: h(() => [
          w(V(e.text), 1)
        ]),
        _: 1
      }, 8, ["modelValue", "position", "class-name"])
    ], 32));
  }
});
export {
  T as default
};
